/**
 * @file Spline.h
 * @author OuyangShangke
 * @brief This file is for the class Spline.
 * @version 0.1
 * @date 2021-11-23
 * 
 * @copyright Copyright (c) 2021
 * 
 */

#ifndef __SPLINE_H__
#define __SPLINE_H__

#include "Config.h"
#include "InterpConditions.h"
#include "Polynomial.h"
#include "myLapack.h"

enum SplineType{ppForm, cardinalB}; ///< type of spline
enum BCType{complete, notAknot, periodic}; ///< type of ppForm spline 

/**
 * @brief class Spline.
 * 
 * @tparam _Dim dimention of spline
 * @tparam _Degree degree of spline
 * @tparam _t type of spline(ppForm of cardinalB)
 */
template<u_int _Dim, u_int _Degree, SplineType _t>
class Spline
{
private:
    enum{
        Dim = _Dim,
        Degree = _Degree,
        Type = _t
    };
    /**
     * @brief store the interpolation points
     * Only use in ppForm spline.
     */
    vector_double interpPoints; 
    /**
     * @brief store the interpolation polynomials in each subinterval
     * Only use in ppForm spline.
     */
    std::vector< Polynomial<_Degree, _Dim> > poly4ppForm; 
    /**
     * @brief store the coefficients of each base functions of cardinalB splines.
     * Only use in cardinalB spline.
     */
    M_INT_DOUBLE coef4candinalB;
    static Spline<_Dim,_Degree,_t> NULL_Spline; ///< NULL

public:

    /**
     * @brief Generate a curve(spline), according to the given points.
     * @details This func has specializations for _Deg=1 and _Deg=3.
     * 
     * @tparam _Deg degree of the spline.
     * @param _points given points.
     * @param _BCType given type of ppForm spline. It's default value = periodic.
     * @return the spline generated by the given points.
     */
    template<u_int _Deg> 
    friend Spline<2, _Deg, ppForm> fitCurve(const vector_Vec2& _points, BCType _BCType);

    /**
     * @brief Compute the spline, according to the given interpolate conditions.\n 
     * @details This template func has following specializations.\n
     * _Deg = 3, _type = ppForm \n
     * _Deg = 2, _type = cardinalB \n 
     * _Deg = 3, _type = cardinalB 
     * 
     * @tparam _Deg degree of spline
     * @tparam _type type of spline(ppForm of cardinalB)
     * @param _cond interpolate conditions
     * @param _BCType if the _type is ppForm, then _BCType means the type of ppForm(complete, notAknot, periodic).\n 
     * And if the _type is cardinalB, then _BCType is dispensable (becuase it has a default value "complete").
     * @return
     */
    template<u_int _Deg, SplineType _type>  
    friend Spline<1, _Deg, _type> interpolate(const InterpConditions& _cond, BCType _BCType);

    /**
     * @brief Compute the ppForm complete cubic spline.
     * 
     * @param _cond interpolate conditions.
     * @param _res a spline object to store the result.
     * @return 0 for OK.
     */
    friend int cubic_complete(const InterpConditions& _cond, Spline<1, 3, ppForm>& _res);

    /**
     * @brief Compute the ppForm notAknot cubic spline.
     * 
     * @param _cond interpolate conditions.
     * @param _res a spline object to store the result.
     * @return 0 for OK.
     */
    friend int cubic_notAknot(const InterpConditions& _cond, Spline<1, 3, ppForm>& _res);

    /**
     * @brief Compute the ppForm periodic cubic spline.
     * 
     * @param _cond interpolate conditions.
     * @param _res a spline object to store the result.
     * @return 0 for OK.
     */
    friend int cubic_periodic(const InterpConditions& _cond, Spline<1, 3, ppForm>& _res);

    /**
     * @brief Scan a certain interval to get enough points on the spline, in order to plot this spline.
     * 
     * @param _begin beginning of the interval
     * @param _end end of the interval
     * @param _step step of scanning
     * @return a std::map object.\n 
     * For each element in std::map, the first part is the value of x0, and the second part is the value of spline when x = x0.\n 
     * It's noteworthy that the second part is actually an object of class Vec.
     */
    std::map<double, Vec<double,_Dim>> 
        scanning(double _begin = 0, double _end = 0, double _step = SCANNING_STEP);

    /**
     * @brief Get the value of the spline at a certain point.
     * 
     * @param _x given point
     * @return value of the spline. It's an object of class Vec.
     */
    Vec<double, _Dim> operator()(double _x) const;

    /**
     * @brief Output a spline. Only support the ppForm spline.
     * 
     * @tparam __Dim 
     * @tparam __Degree 
     * @tparam __t 
     * @return
     */
    template<u_int __Dim, u_int __Degree, SplineType __t>
    friend std::ostream& operator<< (std::ostream& , const Spline<__Dim, __Degree, __t>&);
};



/// IMPLEMENT  
#include "../src/header/Spline.cpp"

#endif